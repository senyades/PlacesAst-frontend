import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Dashboard.scss';

const tourList = [
  {
    id: 1,
    name: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∏–π –∫—Ä–µ–º–ª—å',
    tourUrl: '/tour/1',
    previewImage: 'kreml.jpg'
  },
  {
    id: 2,
    name: '–ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∏–π –º—É–∑–µ–π',
    tourUrl: '/tour/2',
    previewImage: 'museum.jfif'
  },
  {
    id: 3,
    name: '–ë—É–¥–¥–∏–π—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∫–∞–ª–º—ã–∫–æ–≤',
    tourUrl: '/tour/3', 
    previewImage: 'maxresdefault.jpg'
  },
  {
    id: 4,
    name: '–ò—Ö—Ç–∏–æ—Ñ–∞—É–Ω–∞ –Ω–∏–∑–æ–≤–∏–π –í–æ–ª–≥–∏',
    tourUrl: '/tour/4',
    previewImage: 'volga.jpg'
  },
  {
    id: 5,
    name: '–ö–∞–∫—Ç—É—Å–æ–≤—ã–µ –ø–æ–ª—è',
    tourUrl: '/tour/5',
    previewImage: 'kaktus.jpg'
  },
  {
    id: 6,
    name: '–ö—Ä–∞—Å–Ω—ã–π –±—É–≥–æ—Ä',
    tourUrl: '/tour/6',
    previewImage: 'bugor.jpg'
  },
  {
    id: 7,
    name: '–°–∞—Ä–∞–π –±–∞—Ç—É',
    tourUrl: '/tour/7',
    previewImage: 'batu.jpg'
  },
  {
    id: 8,
    name: '–•–æ—à–µ—É—Ç–æ–≤—Å–∫–∏–π —Ö—É—Ä—É–ª',
    tourUrl: '/tour/8',
    previewImage: 'hram.jpg'
  }
];

const Dashboard = () => {
  const [user, setUser] = useState(null);
  const [tours, setTours] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    tourName: ''
  });
  const [activeTab, setActiveTab] = useState('tours');
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (!storedUser) {
      navigate('/');
      return;
    }

    try {
      const userData = JSON.parse(storedUser);
      setUser(userData);

      console.log(userData.test_info)


      const enrichedTours = tourList.map(tour => {
        const testInfo = userData.test_info?.find(t => t.testid === tour.id);
        return {
          ...tour,
          testStatus: testInfo ? testInfo.passed : false
        };
      });

      setTours(enrichedTours);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      localStorage.removeItem('user');
      navigate('/');
    }
  }, [navigate]);

  const handleTourClick = (tourId) => {
    navigate(`/tour/${tourId}`);
  };

  const handleLogout = () => {
    localStorage.removeItem('user');
    navigate('/');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    
    setIsModalOpen(false);
    setFormData({ name: '', phone: '', tourName: '' });
    
    alert(`–¢—É—Ä "${formData.tourName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
  };

  const calculateAchievements = () => {
    const completedTours = tours.filter(tour => tour.testStatus).length;
    const achievements = [];
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç—É—Ä
    for (let i = 1; i <= completedTours; i++) {
      achievements.push({
        id: i,
        title: `–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ${i} —É—Ä–æ–≤–Ω—è`,
        description: `–ü—Ä–æ–π–¥–µ–Ω–æ ${i} ${i === 1 ? '—Ç—É—Ä' : i < 5 ? '—Ç—É—Ä–∞' : '—Ç—É—Ä–æ–≤'}`,
        icon: 'üèÜ',
        unlocked: true
      });
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –≤—Å–µ —Ç—É—Ä—ã
    if (completedTours === tours.length) {
      achievements.push({
        id: 'master',
        title: '–ú–∞—Å—Ç–µ—Ä —ç–∫—Å–∫—É—Ä—Å–∏–π',
        description: '–ü—Ä–æ–π–¥–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã',
        icon: 'üëë',
        unlocked: true
      });
    }
    
    return achievements;
  };

  const achievements = calculateAchievements();

  if (!user) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <div className="user-info">
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.login}!</h2>
          {user.admin && <div className="admin-badge">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>}
        </div>
        
        <div className="header-actions">
          <button 
            onClick={() => setIsModalOpen(true)} 
            className="add-tour-button"
          >
            –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä
          </button>
          
          <button onClick={handleLogout} className="logout-button">
            –í—ã–π—Ç–∏
          </button>
        </div>
      </header>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="tabs">
        <button 
          className={`tab-button ${activeTab === 'tours' ? 'active' : ''}`}
          onClick={() => setActiveTab('tours')}
        >
          –¢—É—Ä—ã
        </button>
        <button 
          className={`tab-button ${activeTab === 'achievements' ? 'active' : ''}`}
          onClick={() => setActiveTab('achievements')}
        >
          –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        </button>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∞ —Å —Ç—É—Ä–∞–º–∏ */}
      {activeTab === 'tours' && (
        <div className="tours-section">
          <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-—Ç—É—Ä—ã</h3>
          <div className="tours-grid">
            {tours.map((tour) => (
              <div 
                key={tour.id}
                className="tour-card"
                onClick={() => handleTourClick(tour.id)}
              >
                <div 
                  className="tour-preview"
                  style={{ backgroundImage: `url(/images/${tour.previewImage})` }}
                >
                  {tour.testStatus && (
                    <div className="tour-status completed">
                      –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    </div>
                  )}
                </div>
                <div className="tour-info">
                  <h4>{tour.name}</h4>
                  <button 
                    className="start-tour-button"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleTourClick(tour.id);
                    }}
                  >
                    –ù–∞—á–∞—Ç—å —Ç—É—Ä
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ */}
      {activeTab === 'achievements' && (
        <div className="achievements-section">
          <h3>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
          
          <div className="progress-bar">
            <div className="progress-text">
              –ü—Ä–æ–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤: {tours.filter(t => t.testStatus).length} –∏–∑ {tours.length}
            </div>
            <div className="progress-track">
              <div 
                className="progress-fill" 
                style={{ width: `${(tours.filter(t => t.testStatus).length / tours.length) * 100}%` }}
              ></div>
            </div>
          </div>
          
          {achievements.length > 0 ? (
            <div className="achievements-grid">
              {achievements.map(achievement => (
                <div 
                  key={achievement.id} 
                  className={`achievement-card ${achievement.unlocked ? 'unlocked' : 'locked'}`}
                >
                  <div className="achievement-icon">{achievement.icon}</div>
                  <div className="achievement-info">
                    <h4>{achievement.title}</h4>
                    <p>{achievement.description}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="no-achievements">
              <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!</p>
            </div>
          )}
        </div>
      )}

      {isModalOpen && (
        <div className="modal-overlay" onClick={() => setIsModalOpen(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button 
              className="modal-close"
              onClick={() => setIsModalOpen(false)}
            >
              &times;
            </button>
            
            <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä</h3>
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label>–í–∞—à–µ –∏–º—è</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                />
              </div>
              
              <div className="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  required
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                />
              </div>
              
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞</label>
                <input
                  type="text"
                  name="tourName"
                  value={formData.tourName}
                  onChange={handleInputChange}
                  required
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞"
                />
              </div>
              
              <button type="submit" className="submit-button">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;