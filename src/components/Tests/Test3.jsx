import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './TestPage.scss';

const testQuestions = {
  3: [
    {
      question: '–ö–∞–∫–æ–π –Ω–∞—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Å–∏—Ç–µ–ª–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –±—É–¥–¥–∏–π—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ?',
      options: ['–ö–∞–∑–∞—Ö–∏', '–ö–∞–ª–º—ã–∫–∏', '–ù–æ–≥–∞–π—Ü—ã', '–†—É—Å—Å–∫–∏–µ'],
      correctIndex: 1
    },
    {
      question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ö—Ä–∞–º –±—É–¥–¥–∏—Å—Ç–æ–≤-–∫–∞–ª–º—ã–∫–æ–≤?',
      options: ['–ö—É–º–∏—Ä–Ω—è', '–°–∏–Ω–∞–≥–æ–≥–∞', '–ü–∞–≥–æ–¥–∞', '–•—É—Ä—É–ª'],
      correctIndex: 3
    },
    {
      question: '–ö–∞–∫–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è —Å—ã–≥—Ä–∞–ª–∞ –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–∞–ª–º—ã—Ü–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã?',
      options: ['–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –ú–∏–∫–ª—É—Ö–æ-–ú–∞–∫–ª–∞—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ü—Ä–∂–µ–≤–∞–ª—å—Å–∫–æ–≥–æ', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –†–ê–ù', '–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –ü–∞–ª–ª–∞—Å—Å–∞'],
      correctIndex: 3
    },
    {
      question: '–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–∞–ª–º—ã–∫–æ–≤?',
      options: ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –º–∞–Ω—Ç—Ä—ã', '–ò–∫–æ–Ω–æ–ø–∏—Å—å', '–•–æ–∂–¥–µ–Ω–∏–µ –ø–æ —É–≥–ª—è–º', '–¢–∞–Ω–µ—Ü —Å–∞–±–ª–µ–π'],
      correctIndex: 0
    },
    {
      question: '–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–∞–ª–º—ã–∫–∞–º–∏ –¥–ª—è –º–æ–ª–∏—Ç–≤—ã?',
      options: ['–ö–æ–≤—Ä–∏–∫', '–ö–æ–ª–æ–∫–æ–ª', '–ú–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã–π –±–∞—Ä–∞–±–∞–Ω', '–ß—ë—Ç–∫–∏'],
      correctIndex: 2
    }
  ]
};

const AchievementPopup = ({ onClose }) => {
  return (
    <div className="achievement-popup">
      <div className="popup-content">
        <div className="achievement-icon">üïâÔ∏è</div>
        <h3>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ó–Ω–∞—Ç–æ–∫ –±—É–¥–¥–∏–π—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∫–∞–ª–º—ã–∫–æ–≤"</p>
        <button onClick={onClose}>–û—Ç–ª–∏—á–Ω–æ!</button>
      </div>
    </div>
  );
};

const TestPage = () => {
  const testIdNumber = 3; // ID —Ç–µ—Å—Ç–∞ ‚Äî –±—É–¥–¥–∏–π—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∫–∞–ª–º—ã–∫–æ–≤
  const questions = testQuestions[testIdNumber] || [];

  const navigate = useNavigate();
  const [answers, setAnswers] = useState([]);
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);
  const [showAchievement, setShowAchievement] = useState(false);

  useEffect(() => {
    setAnswers(Array(questions.length).fill(null));
  }, [questions.length]);

  const storedUser = JSON.parse(localStorage.getItem('user'));

  if (!storedUser || !Array.isArray(storedUser.test_info)) {
    return <div>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.</div>;
  }

  const currentTestStatus = storedUser.test_info.find(
    (t) => t.testid === testIdNumber
  );

  const isAlreadyPassed = currentTestStatus?.passed;

  const handleAnswer = (qIndex, optionIndex) => {
    if (isAlreadyPassed) return;
    const updated = [...answers];
    updated[qIndex] = optionIndex;
    setAnswers(updated);
  };

  const handleSubmit = async () => {
    const correctCount = questions.reduce((acc, q, idx) => {
      return acc + (answers[idx] === q.correctIndex ? 1 : 0);
    }, 0);

    try {
      await axios.post(`${process.env.REACT_APP_API_URL}/user/test-result`, {
        login: storedUser.login,
        testid: testIdNumber,
        score: correctCount
      });

      const updatedTests = storedUser.test_info.map((test) =>
        test.testid === testIdNumber
          ? { ...test, passed: true, score: correctCount }
          : test
      );

      const updatedUser = { ...storedUser, test_info: updatedTests };
      localStorage.setItem('user', JSON.stringify(updatedUser));

      setScore(correctCount);
      setSubmitted(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
      if (!isAlreadyPassed) {
        setShowAchievement(true);
      } else {
        alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ë–∞–ª–ª–æ–≤: ${correctCount} –∏–∑ ${questions.length}`);
        navigate('/dashboard');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞.');
    }
  };

  const closeAchievementPopup = () => {
    setShowAchievement(false);
    alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ë–∞–ª–ª–æ–≤: ${score} –∏–∑ ${questions.length}`);
    navigate('/dashboard');
  };

  return (
    <div className="test-page">
      <h2>–¢–µ—Å—Ç #{testIdNumber}: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –±—É–¥–¥–∏–π—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∫–∞–ª–º—ã–∫–æ–≤</h2>

      {isAlreadyPassed && (
        <div className="already-passed">
          –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ë–∞–ª–ª—ã: {currentTestStatus.score} –∏–∑ {questions.length}
        </div>
      )}

      {questions.map((q, idx) => (
        <div key={idx} className="question-block">
          <h4>{q.question}</h4>
          <div className="options">
            {q.options.map((opt, optIdx) => (
              <label key={optIdx}>
                <input
                  type="radio"
                  name={`q${idx}`}
                  checked={answers[idx] === optIdx}
                  onChange={() => handleAnswer(idx, optIdx)}
                  disabled={isAlreadyPassed || submitted}
                />
                {opt}
              </label>
            ))}
          </div>
        </div>
      ))}

      {!isAlreadyPassed && !submitted && (
        <button
          onClick={handleSubmit}
          disabled={answers.includes(null)}
          className="submit-button"
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
        </button>
      )}

      {showAchievement && <AchievementPopup onClose={closeAchievementPopup} />}
    </div>
  );
};

export default TestPage;