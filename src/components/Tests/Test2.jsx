import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './TestPage.scss';

const testQuestions = {
  2: [
    {
      question: '–ì–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∏–π –º—É–∑–µ–π –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏?',
      options: ['–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—Ä–µ–º–ª—è', '–ù–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –í–æ–ª–≥–∏', '–í –∑–¥–∞–Ω–∏–∏ –±—ã–≤—à–µ–≥–æ –ì–æ—Å—Ç–∏–Ω–æ–≥–æ –¥–≤–æ—Ä–∞', '–í –∑–¥–∞–Ω–∏–∏ —Ç–µ–∞—Ç—Ä–∞'],
      correctIndex: 2
    },
    {
      question: '–ö–æ–≥–¥–∞ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∏–π –º—É–∑–µ–π?',
      options: ['–≤ 1810 –≥–æ–¥—É', '–≤ 1877 –≥–æ–¥—É', '–≤ 1901 –≥–æ–¥—É', '–≤ 1945 –≥–æ–¥—É'],
      correctIndex: 1
    },
    {
      question: '–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–π –º—É–∑–µ—è?',
      options: ['–ö–æ—Å–º–æ—Å', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–∞ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–≥–æ –∫—Ä–∞—è', '–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ'],
      correctIndex: 2
    },
    {
      question: '–ö–∞–∫–æ–π –∏–∑ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º—É–∑–µ—è?',
      options: ['–ó—É–± –º–∞–º–æ–Ω—Ç–∞', '–ü–∏—Å—å–º–∞ –õ–µ–Ω–∏–Ω–∞', '–ö–∞—Ä—Ç–∞ XVIII –≤–µ–∫–∞', '–ö–æ–ª–ª–µ–∫—Ü–∏—è —á–∞—Å–æ–≤'],
      correctIndex: 0
    },
    {
      question: '–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª–æ–≤ —É –º—É–∑–µ—è –ø–æ –æ–±–ª–∞—Å—Ç–∏ (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ 2020-–µ –≥–æ–¥—ã)?',
      options: ['1', '3', '5', '7'],
      correctIndex: 3
    }
  ]
};

const AchievementPopup = ({ onClose }) => {
  return (
    <div className="achievement-popup">
      <div className="popup-content">
        <div className="achievement-icon">üèÜ</div>
        <h3>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ó–Ω–∞—Ç–æ–∫ –ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–æ–≥–æ –º—É–∑–µ—è"</p>
        <button onClick={onClose}>–û—Ç–ª–∏—á–Ω–æ!</button>
      </div>
    </div>
  );
};

const TestPage = () => {
  const testIdNumber = 2; // –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω ID —Ç–µ—Å—Ç–∞ (–ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∏–π –º—É–∑–µ–π)
  const questions = testQuestions[testIdNumber] || [];

  const navigate = useNavigate();
  const [answers, setAnswers] = useState([]);
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(null);
  const [showAchievement, setShowAchievement] = useState(false);

  useEffect(() => {
    setAnswers(Array(questions.length).fill(null));
  }, [questions.length]);

  const storedUser = JSON.parse(localStorage.getItem('user'));

  if (!storedUser || !Array.isArray(storedUser.test_info)) {
    return <div>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.</div>;
  }

  const currentTestStatus = storedUser.test_info.find(
    (t) => t.testid === testIdNumber
  );

  const isAlreadyPassed = currentTestStatus?.passed;

  const handleAnswer = (qIndex, optionIndex) => {
    if (isAlreadyPassed) return;
    const updated = [...answers];
    updated[qIndex] = optionIndex;
    setAnswers(updated);
  };

  const handleSubmit = async () => {
    const correctCount = questions.reduce((acc, q, idx) => {
      return acc + (answers[idx] === q.correctIndex ? 1 : 0);
    }, 0);

    try {
      await axios.post(`${process.env.REACT_APP_API_URL}/user/test-result`, {
        login: storedUser.login,
        testid: testIdNumber,
        score: correctCount
      });

      const updatedTests = storedUser.test_info.map((test) =>
        test.testid === testIdNumber
          ? { ...test, passed: true, score: correctCount }
          : test
      );

      const updatedUser = { ...storedUser, test_info: updatedTests };
      localStorage.setItem('user', JSON.stringify(updatedUser));

      setScore(correctCount);
      setSubmitted(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
      if (!isAlreadyPassed) {
        setShowAchievement(true);
      } else {
        alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ë–∞–ª–ª–æ–≤: ${correctCount} –∏–∑ ${questions.length}`);
        navigate('/dashboard');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞.');
    }
  };

  const closeAchievementPopup = () => {
    setShowAchievement(false);
    alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ë–∞–ª–ª–æ–≤: ${score} –∏–∑ ${questions.length}`);
    navigate('/dashboard');
  };

  return (
    <div className="test-page">
      <h2>–¢–µ—Å—Ç #{testIdNumber}: –ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∏–π –º—É–∑–µ–π –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏</h2>

      {isAlreadyPassed && (
        <div className="already-passed">
          –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ë–∞–ª–ª—ã: {currentTestStatus.score} –∏–∑ {questions.length}
        </div>
      )}

      {questions.map((q, idx) => (
        <div key={idx} className="question-block">
          <h4>{q.question}</h4>
          <div className="options">
            {q.options.map((opt, optIdx) => (
              <label key={optIdx}>
                <input
                  type="radio"
                  name={`q${idx}`}
                  checked={answers[idx] === optIdx}
                  onChange={() => handleAnswer(idx, optIdx)}
                  disabled={isAlreadyPassed || submitted}
                />
                {opt}
              </label>
            ))}
          </div>
        </div>
      ))}

      {!isAlreadyPassed && !submitted && (
        <button
          onClick={handleSubmit}
          disabled={answers.includes(null)}
          className="submit-button"
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
        </button>
      )}

      {showAchievement && <AchievementPopup onClose={closeAchievementPopup} />}
    </div>
  );
};

export default TestPage;